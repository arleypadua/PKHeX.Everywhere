name: Release packages

on:
  workflow_dispatch:
    inputs:
      pushHomebrewFormula:
        description: 'push homebrew formula'
        type: boolean
        required: false
        default: true
      pushChocolateyPackage:
        description: 'push chocolatey package'
        type: boolean
        required: false
        default: true
      pushNugetPackages:
        description: 'push nuget packages'
        type: boolean
        required: false
        default: true
      manualTrigger:
        description: 'To target a manual triggered job '
        type: boolean
        required: false
        default: true
        
  workflow_run:
    workflows: ["Release"]
    types:
      - completed

jobs:
  generateHomebrewFormula:
    if: ${{ github.event.workflow_run.conclusion == 'success' || (inputs.manualTrigger && inputs.pushHomebrewFormula) }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout formula repository
        uses: actions/checkout@v4
        with:
          repository: arleypadua/homebrew-pkhex-cli
          token: ${{ secrets.GIT_HUB_HOMEBREW_FORMULA_TOKEN }}

      - name: Fetch latest release metadata
        id: fetch_metadata
        run: |
          curl -s https://api.github.com/repos/arleypadua/PKHeX.Everywhere/releases/latest > latest_release.json

      - name: Parse release metadata
        id: parse_metadata
        run: |
          VERSION=$(jq -r .tag_name latest_release.json)
          OSX_ARM64_URL=$(jq -r '.assets[] | select(.name | test("pkhex-cli-osx-arm64.zip")) | .browser_download_url' latest_release.json)
          OSX_X64_URL=$(jq -r '.assets[] | select(.name | test("pkhex-cli-osx-x64.zip")) | .browser_download_url' latest_release.json)
          LINUX_X64_URL=$(jq -r '.assets[] | select(.name | test("pkhex-cli-linux-x64.zip")) | .browser_download_url' latest_release.json)

          # compute sha256 checksum
          curl -L -o pkhex-cli-osx-arm64.zip $OSX_ARM64_URL
          SHA256_OSX_ARM64=$(sha256sum pkhex-cli-osx-arm64.zip | awk '{ print $1 }')
          
          curl -L -o pkhex-cli-osx-x64.zip $OSX_X64_URL
          SHA256_OSX_X64=$(sha256sum pkhex-cli-osx-x64.zip | awk '{ print $1 }')
          
          curl -L -o pkhex-cli-linux-x64.zip $LINUX_X64_URL
          SHA256_LINUX_X64=$(sha256sum pkhex-cli-linux-x64.zip | awk '{ print $1 }')

          # output extracted information
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "osx_arm64_url=$OSX_ARM64_URL" >> "$GITHUB_OUTPUT"
          echo "osx_x64_url=$OSX_X64_URL" >> "$GITHUB_OUTPUT"
          echo "linux_x64_url=$LINUX_X64_URL" >> "$GITHUB_OUTPUT"
          
          echo "sha256_osx_arm64=$SHA256_OSX_ARM64" >> "$GITHUB_OUTPUT"
          echo "sha256_osx_x64=$SHA256_OSX_X64" >> "$GITHUB_OUTPUT"
          echo "sha256_linux_x64=$SHA256_LINUX_X64" >> "$GITHUB_OUTPUT"

      - name: Generate pkhex-cli.rb formula
        run: |
          cat <<EOF > Formula/pkhex-cli.rb
          class PkhexCli < Formula
            version "${{ steps.parse_metadata.outputs.version }}"
            desc "A CLI to manipulate pokemon game save files."
            homepage "https://github.com/arleypadua/PKHeX.Everywhere"

            if OS.mac? && Hardware::CPU.arm?
              url "${{ steps.parse_metadata.outputs.osx_arm64_url }}"
              sha256 "${{ steps.parse_metadata.outputs.sha256_osx_arm64 }}"
            elsif OS.mac?
              url "${{ steps.parse_metadata.outputs.osx_x64_url }}"
              sha256 "${{ steps.parse_metadata.outputs.sha256_osx_x64 }}"
            elsif OS.linux?
              url "${{ steps.parse_metadata.outputs.linux_x64_url }}"
              sha256 "${{ steps.parse_metadata.outputs.sha256_linux_x64 }}"
            end

            def install
              bin.install "pkhex-cli"
            end

            test do
              system "#{bin}/pkhex-cli --version"
            end
          end
          EOF

      - name: Check if Formula/pkhex-cli.rb has changed
        id: check_file_change
        run: |
          if git diff --exit-code Formula/pkhex-cli.rb; then
            echo "file_changed=false" >> $GITHUB_ENV
          else
            echo "file_changed=true" >> $GITHUB_ENV
          fi
      
      - name: Commit and push pkhex-cli.rb to another repository
        if: env.file_changed == 'true'
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git add Formula/pkhex-cli.rb
          git commit -m "update pkhex-cli formula to version ${{ steps.parse_metadata.outputs.version }}"
          git push origin

  publishChocolateyPackage:
    if: ${{ github.event.workflow_run.conclusion == 'success' || (inputs.manualTrigger && inputs.pushChocolateyPackage) }}
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch latest release metadata
        id: fetch_parse_metadata
        run: |
          $latest_release = Invoke-RestMethod -Uri https://api.github.com/repos/arleypadua/PKHeX.Everywhere/releases/latest
          $version = $latest_release.tag_name -replace '^v'
          $windows_asset = $latest_release.assets | Where-Object { $_.name -like "pkhex-cli-win-x64.zip" }
          $windows_url = $windows_asset.browser_download_url

          Invoke-WebRequest -Uri $windows_url -OutFile pkhex-cli-win-x64.zip
          Expand-Archive -Path "pkhex-cli-win-x64.zip" -Force
          
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "windowsUrl=$windows_url" >> $env:GITHUB_OUTPUT

      - name: Create pkhex-cli.nuspec
        run: |
          $nuspecContent = @"
          <?xml version="1.0"?>
          <package xmlns="http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd">
            <metadata>
              <id>pkhex-cli</id>
              <version>${{ steps.fetch_parse_metadata.outputs.version }}</version>
              <title>pkhex-cli</title>
              <authors>Arley Pádua</authors>
              <owners>Arley Pádua</owners>
              <description>Cross platform CLI tool for interacting with Pokemon save files. Works with Mac OS, Linux and Windows.</description>
              <summary>Cross platform CLI tool for interacting with Pokemon save files.</summary>
              <packageSourceUrl>https://github.com/arleypadua/PKHeX.CLI</packageSourceUrl>
              <projectUrl>https://github.com/arleypadua/PKHeX.CLI</projectUrl>
              <licenseUrl>https://github.com/arleypadua/PKHeX.CLI/blob/main/LICENSE</licenseUrl>
              <requireLicenseAcceptance>false</requireLicenseAcceptance>
              <tags>CLI PKHeX</tags>
              <releaseNotes>https://github.com/arleypadua/PKHeX.CLI/releases</releaseNotes>
            </metadata>
            <files>
              <file src="tools\**" target="tools" />
              <file src="LICENSE" target="tools/LICENSE.txt" />
              <file src="VERIFICATION.txt" target="tools/VERIFICATION.txt" />
            </files>
          </package>
          "@

          $nuspecContent | Out-File -FilePath pkhex-cli.nuspec

      - name: Create tools directory and move executable
        run: |
          New-Item -ItemType Directory -Force -Path tools
          Move-Item -Path pkhex-cli-win-x64/pkhex-cli.exe -Destination tools/

      - name: Create VERIFICATION.txt
        run: |
          $fileHash = (Get-FileHash -Path "tools/pkhex-cli.exe" -Algorithm SHA256).Hash

          $verificationContent = @"
          VERIFICATION
          Verification is intended to assist the Chocolatey moderators and community
          in verifying that this package's contents are trustworthy.

          ## Reason for Including Binaries
          The binaries are included directly to ensure a consistent and reliable installation.

          ## Source of Binaries
          Obtained from the official GitHub release:
          ${{ steps.fetch_parse_metadata.outputs.windows_url }}

          ## Verification Steps
          - Unzip the contents of the downloaded zip file
          - SHA256 checksum:
            - Expected: $fileHash
            - Use `(Get-FileHash -Path "pkhex-cli.exe" -Algorithm SHA256).Hash` to verify.

          As the author of this software, I confirm these binaries are authentic and securely packaged.
          "@

          $verificationContent | Out-File -FilePath VERIFICATION.txt

      - name: Pack the Chocolatey package
        run: choco pack

      - name: Push the Chocolatey package
        run: choco push pkhex-cli.${{ steps.fetch_parse_metadata.outputs.version }}.nupkg --source https://push.chocolatey.org/ --api-key ${{ secrets.CHOCOLATEY_API_KEY }}
  publishNugetPackages:
    if: ${{ github.event.workflow_run.conclusion == 'success' || (inputs.manualTrigger && inputs.pushNugetPackages) }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Fetch latest release metadata
        id: fetch_parse_metadata
        run: |
          curl -s https://api.github.com/repos/arleypadua/PKHeX.Everywhere/releases/latest > latest_release.json
          VERSION=$(jq -r .tag_name latest_release.json | sed 's/^v//')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Build and pack PKHeX.Facade
        run: |
          version=${{ steps.fetch_parse_metadata.outputs.version }}
          
          chmod +x ./src/PKHeX.Facade/create-pack-project.sh
          ./src/PKHeX.Facade/create-pack-project.sh
          
          dotnet pack src/PKHeX.Facade/PKHeX.Facade.nupkg.csproj -p:Version=$version -c Release -o src/PKHeX.Facade/
          dotnet nuget push src/PKHeX.Facade/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Build and pack PKHeX.Web.Plugins
        run: |
          version=${{ steps.fetch_parse_metadata.outputs.version }}
          
          dotnet restore src/PKHeX.Web.Plugins
          dotnet build src/PKHeX.Web.Plugins -c Release --no-restore
          dotnet pack src/PKHeX.Web.Plugins/PKHeX.Web.Plugins.csproj -p:Version=$version -c Release --no-build -o src/PKHeX.Web.Plugins/
          dotnet nuget push src/PKHeX.Web.Plugins/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate
