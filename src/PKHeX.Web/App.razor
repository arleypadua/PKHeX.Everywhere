@implements IDisposable
@inject AntdThemeService ThemeService


<ConfigProvider
    @ref="_configProvider"
    Theme="_theme">
    <Router AppAssembly="@typeof(App).Assembly" @rendermode="RenderMode.InteractiveAuto">
        <Found Context="routeData">
            <AntContainer @rendermode="RenderMode.InteractiveAuto"/>
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)"/>
            <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>

    <BytexDigital.Blazor.Components.CookieConsent.CookieConsentHandler @rendermode="@RenderMode.InteractiveWebAssembly" />
</ConfigProvider>
<NavigationTracker/>

<link rel="stylesheet" href="_content/BytexDigital.Blazor.Components.CookieConsent/styles.min.css" />
<style>
    .cc-isolation-container * {
        --cc-color-accent: #177ddc;
        --cc-color-accent-dark: #115696;
        --cc-color-switch-active:#177ddc;
    }
</style>

@code
{
    private GlobalTheme _theme = GlobalTheme.Light;
    private ConfigProvider _configProvider = default!;

    protected override void OnInitialized()
    {
        _theme = ThemeService.Theme;
        AntdThemeService.ThemeChanged += HandleChangedTheme;
    }

    private async Task HandleChangedTheme(GlobalTheme theme)
    {
        _theme = theme;
        await _configProvider.ChangeGlobalTheme(_theme);
    }

    public void Dispose()
    {
        AntdThemeService.ThemeChanged -= HandleChangedTheme;
    }
}