@using PKHeX.Web.BackendApi
@using PKHeX.Web.BackendApi.Repositories
@using PKHeX.Web.BackendApi.Representation
@using PKHeX.Web.Services.Auth
@implements IDisposable
@inject INotificationService Notification
@inject SyncPokemonWorker SyncWorker
@inject SyncPokemonQueue SyncQueue
@inject LocalSyncedPokemonRepository LocalSyncedPokemonRepository
@inject MyPokemonRepository MyPokemonRepository
@inject NavigationManager Navigation
@inject UserRepository UserRepository
@inject AnalyticsService AnalyticsService
@inject AuthService Auth

<Space Style="width: 100%; gap: 10px;" Direction="DirectionVHType.Vertical">
    <ResponsibleDescriptions Bordered Size="small" Style="width: 100%">
        <DescriptionsItem Title="Synced">
            <Switch
                Checked="@_isSynced"
                Loading="@_isSyncing"
                Control
                OnClick="HandleSyncClick">
                <CheckedChildrenTemplate>
                    <Icon Type="cloud"></Icon>
                </CheckedChildrenTemplate>
                <UnCheckedChildrenTemplate>
                    <Icon Type="disconnect"></Icon>
                </UnCheckedChildrenTemplate>
            </Switch>
        </DescriptionsItem>

        <DescriptionsItem Title="Public">
            <Switch
                Checked="@(_syncedMetadata?.IsPublic ?? false)"
                Disabled="@(!_isSynced)"
                OnChange="HandlePublicClick">
                <CheckedChildrenTemplate>
                    <Icon Type="eye"></Icon>
                </CheckedChildrenTemplate>
                <UnCheckedChildrenTemplate>
                    <Icon Type="eye-invisible"></Icon>
                </UnCheckedChildrenTemplate>
            </Switch>
        </DescriptionsItem>

        <DescriptionsItem Title="Allow Download">
            <Switch
                Checked="@(_syncedMetadata?.AllowDownload ?? false)"
                Disabled="@(!_syncedMetadata?.IsPublic ?? true)"
                OnChange="HandleAllowDownloadClick">
                <CheckedChildrenTemplate>
                    <Icon Type="cloud-download"></Icon>
                </CheckedChildrenTemplate>
            </Switch>

        </DescriptionsItem>
    </ResponsibleDescriptions>

    @if (_isSynced && _syncedMetadata is not null && _syncedMetadata.IsPublic)
    {
        var link = _syncedMetadata.GetShareUrl(Navigation.BaseUri);
        var message = _syncedMetadata.AllowDownload
            ? "Your Pokemon is public and can be downloaded by others."
            : "Your Pokemon is public but cannot be downloaded by others.";
        <Alert
            Type="@AlertType.Info"
            ShowIcon="true">
            <Paragraph>
                @message
            </Paragraph>
            <Paragraph>
                @{ var copyConfig = new TypographyCopyableConfig { Text = link }; }
                <Text
                    Copyable
                    CopyConfig="copyConfig">
                    <a href="@link"
                       target="_blank">
                        @link
                    </a>
                </Text>
            </Paragraph>
        </Alert>
    }
</Space>

@code {
    [Parameter] public required Pokemon Pokemon { get; set; }
    [Parameter] public Guid? CloudId { get; set; }

    private bool _isSyncing;
    private bool _isSynced;

    private PokemonMetadataRepresentation? _syncedMetadata;

    protected override async Task OnInitializedAsync()
    {
        SyncPokemonWorker.PokemonUploaded += HandlePokemonUploaded;

        SetSyncingStatuses();

        await RefreshMetadata();
    }

    private async Task HandleSyncClick(object arg)
    {
        if (!_isSynced)
        {
            var user = await UserRepository.GetSignedInUser();
            if (LocalSyncedPokemonRepository.Count() >= user.SyncQuota)
            {
                _ = Notification.Open(new NotificationConfig
                {
                    Message = "Quota Exceeded",
                    Description = $"You have reached your sync quota: {user.SyncQuota}.",
                    NotificationType = NotificationType.Error
                });
                
                AnalyticsService.TrackPokemonSyncQuotaExceeded(await Auth.GetSignedInUserOrThrow(), user.SyncQuota);
            }
            else
            {
                SyncQueue.Enqueue(Pokemon);
            }
        }
        else
        {
            if (CloudId.HasValue)
            {
                await MyPokemonRepository.RemoveById(CloudId.Value);
            }
            else
            {
                await MyPokemonRepository.RemoveByLocalId(Pokemon.GetLocalSyncId());
            }

            if (_syncedMetadata is not null)
            {
                AnalyticsService.TrackPokemonSyncStopped(_syncedMetadata, await Auth.GetSignedInUserOrThrow());   
            }
        }

        await RefreshMetadata();
        SetSyncingStatuses();

        StateHasChanged();
    }

    private async Task HandlePublicClick(bool isShared)
    {
        if (_syncedMetadata is null) return;

        await MyPokemonRepository.Share(_syncedMetadata.Id, isShared);
        AnalyticsService.TrackPokemonPublicToggle(_syncedMetadata, isShared, await Auth.GetSignedInUserOrThrow());

        await RefreshMetadata();
    }

    private async Task HandleAllowDownloadClick(bool isAllowed)
    {
        if (_syncedMetadata is null) return;

        await MyPokemonRepository.AllowDownload(_syncedMetadata.Id, isAllowed);
        AnalyticsService.TrackPokemonDownloadToggle(_syncedMetadata, isAllowed, await Auth.GetSignedInUserOrThrow());

        await RefreshMetadata();
    }

    private async Task HandlePokemonUploaded(PokemonUploadedArgs arg)
    {
        if (arg.Pokemon.GetLocalSyncId() != Pokemon.GetLocalSyncId()) return;

        _syncedMetadata = arg.Metadata;

        AnalyticsService.TrackPokemonSyncStarted(arg.Metadata, await Auth.GetSignedInUserOrThrow());

        SetSyncingStatuses();

        StateHasChanged();
    }

    private void SetSyncingStatuses()
    {
        _isSynced = LocalSyncedPokemonRepository.IsSynced(Pokemon) 
                    || (CloudId.HasValue && LocalSyncedPokemonRepository.IsSynced(CloudId.Value));
        _isSyncing = SyncQueue.IsEnqueued(Pokemon)
                     || SyncWorker.PokemonSyncing?.GetLocalSyncId() == Pokemon.GetLocalSyncId();
    }

    private async Task RefreshMetadata()
    {
        if (_isSynced)
        {
            try
            {
                _syncedMetadata = CloudId.HasValue
                    ? await MyPokemonRepository.GetById(CloudId.Value)
                    : await MyPokemonRepository.GetByLocalId(Pokemon.GetLocalSyncId());
            }
            catch (NotFoundException)
            {
                // maybe we just unsynced the pokemon a the state will be eventually updated
                // there's probably a better way to handle this, but for now we simply set it to null
                _syncedMetadata = null;
            }
            
        }
        else
        {
            _syncedMetadata = null;
        }
        
        StateHasChanged();
    }

    public void Dispose()
    {
        SyncPokemonWorker.PokemonUploaded -= HandlePokemonUploaded;
    }

}