@using System.Reflection
@using PKHeX.Core
@using PKHeX.Web.Plugins
@using PKHeX.Web.Services.Plugins
@inject PlugInRegistry PlugInRegistry
@inject PlugInRuntime PlugInRuntime

<Space Style="gap: 20px;" Wrap>
    @foreach (var description in Descriptions)
    {
        <ResponsibleDescriptions Bordered Title="@description.Key" Size="small" Style="width: 100%">
            <DescriptionsItem Title="Base">
                @InputFor(@description.Value.GetBase, @description.Value.SetBase, @description.Value.ReadOnly)
            </DescriptionsItem>
            <DescriptionsItem Title="IV">
                @InputFor(@description.Value.GetIv, @description.Value.SetIv, @description.Value.ReadOnly)
            </DescriptionsItem>
            <DescriptionsItem Title="EV">
                @InputFor(@description.Value.GetEv, @description.Value.SetEv, @description.Value.ReadOnly)
            </DescriptionsItem>
            @if (Pokemon.AVs != null)
            {
                <DescriptionsItem Title="AV">
                    @InputFor(@description.Value.GetAv, @description.Value.SetAv, @description.Value.ReadOnly)
                </DescriptionsItem>
            }
        </ResponsibleDescriptions>
    }

    @if (Pokemon.BaseStats.CombatPower is not null)
    {
        <ResponsibleDescriptions Bordered Title="Extra" Size="small" Style="width: 100%">
            <DescriptionsItem Title="CP">
                <AntDesign.InputNumber
                    TValue="int"
                    Value="Pokemon.BaseStats.CombatPower.Value"
                    OnChange="v => HandleStatChange(_ => Pokemon.BaseStats.CombatPower = v, v)"/>
                <Button
                    OnClick="HandleResetCpClick">
                    Re-calculate
                </Button>

            </DescriptionsItem>
        </ResponsibleDescriptions>
    }
</Space>

@{ var actions = PlugInRegistry.GetAllEnabledHooks<IPokemonStatsEditAction>().ToList(); }
@if (actions.Any())
{
    <div class="stat_actions">
        @foreach (var action in actions)
        {
            @RenderActionButton(action)
        }
    </div>
}

<style>
    .stat_actions {
        margin-top: 20px;
        display: flex; 
        gap: 20px; 
        align-items: center; 
        justify-items: center;
    }
    
    .stat_actions > * {
        flex-shrink: 0;
    }
</style>

@code {
    [Parameter] public required Pokemon Pokemon { get; set; }
    [Parameter] public EventCallback<Pokemon> OnPokemonChanged { get; set; }

    private RenderFragment InputFor(Func<int> get, Action<int> set, bool readOnly)
    {
        return
            @<AntDesign.InputNumber
                 TValue="int"
                 Disabled="readOnly"
                 Value="get()"
                 OnChange="(v) => HandleStatChange(set, v)"/>;
    }

    private async Task HandleStatChange(Action<int> set, int value)
    {
        set(value);
        await HandleResetCpClick();
        await OnPokemonChanged.InvokeAsync(Pokemon);
    }

    private Task HandleResetCpClick()
    {
        if (Pokemon.Pkm is ICombatPower combatPower)
        {
            combatPower.ResetCP();
            return OnPokemonChanged.InvokeAsync(Pokemon);
        }

        return Task.CompletedTask;
    }

    private Dictionary<string, DescriptionRecord> Descriptions => new()
    {
        { "HP", new(Pokemon, _health) },
        { "Attack", new(Pokemon, _attack) },
        { "Defense", new(Pokemon, _defense) },
        { "Special Attack", new(Pokemon, _specialAttack) },
        { "Special Defense", new(Pokemon, _specialDefense) },
        { "Speed", new(Pokemon, _speed) },
        { "Total", new(Pokemon, _total, true) },
    };

    record DescriptionRecord(Pokemon Pokemon, PropertyInfo Property, bool ReadOnly = false)
    {
        public int GetBase() => Property.GetValue(Pokemon.BaseStats) as int? ?? 0;
        public int GetIv() => Property.GetValue(Pokemon.IVs) as int? ?? 0;
        public int GetEv() => Property.GetValue(Pokemon.EVs) as int? ?? 0;
        public int GetAv() => Property.GetValue(Pokemon.AVs) as int? ?? 0;

        public void SetBase(int value) => Property.SetValue(Pokemon.BaseStats, value);
        public void SetIv(int value) => Property.SetValue(Pokemon.IVs, value);
        public void SetEv(int value) => Property.SetValue(Pokemon.EVs, value);
        public void SetAv(int value) => Property.SetValue(Pokemon.AVs, value);
    };

    private PropertyInfo _attack = typeof(Stats).GetProperty(nameof(Stats.Attack))!;
    private PropertyInfo _defense = typeof(Stats).GetProperty(nameof(Stats.Defense))!;
    private PropertyInfo _specialAttack = typeof(Stats).GetProperty(nameof(Stats.SpecialAttack))!;
    private PropertyInfo _specialDefense = typeof(Stats).GetProperty(nameof(Stats.SpecialDefense))!;
    private PropertyInfo _health = typeof(Stats).GetProperty(nameof(Stats.Health))!;
    private PropertyInfo _speed = typeof(Stats).GetProperty(nameof(Stats.Speed))!;
    private PropertyInfo _total = typeof(Stats).GetProperty(nameof(Stats.Total))!;
    private PropertyInfo _cp = typeof(Stats).GetProperty(nameof(Stats.CombatPower))!;

    private RenderFragment RenderActionButton(IPokemonStatsEditAction action)
    {
        return
            @<Button
                 Type="@ButtonType.Link"
                 OnClick="() => HandleActionButtonClick(action)">
                @action.Label
            </Button>;
    }

    private async Task HandleActionButtonClick(IPokemonStatsEditAction action)
    {
        await PlugInRuntime.RunOn(action, _ => action.OnActionRequested(Pokemon));
    }

}