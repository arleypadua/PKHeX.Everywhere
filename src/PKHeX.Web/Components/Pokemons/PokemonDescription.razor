@using PKHeX.Core
@using PKHeX.Facade.Repositories
@using Gender = PKHeX.Facade.Gender

<ResponsibleDescriptions
    Bordered
    Size="small"
    Style="width: 100%">
    <DescriptionsItem Title="Species">
        @* Disabled for now as changing species leaves out some dirty data in the trash. *@
        @* To figure out how to make a clean evolution/devolution. *@
        <SpeciesSelect
            Source="SpeciesSelect.DataSource.OnlySpeciesChain"
            SelectedSpecies="Pokemon.Species"
            SelectedSpeciesChanged="HandleSelectedSpeciesChanged"
            ShowIcon="false"/>
    </DescriptionsItem>

    <DescriptionsItem Title="Types">
        <Space Style="gap: 5px" Direction="DirectionVHType.Vertical" Wrap>
            <PokemonTypeImage Types="Pokemon.Types" Index="PokemonTypeImage.TypeIndex.Primary"/>
            @if (Pokemon.Types.HasSecondary)
            {
                <PokemonTypeImage Types="Pokemon.Types" Index="PokemonTypeImage.TypeIndex.Secondary"/>
            }
        </Space>
    </DescriptionsItem>
    <DescriptionsItem Title="PID">
        <Text Copyable>@Pokemon.PID.ToString("X8")</Text>
    </DescriptionsItem>
    <DescriptionsItem Title="Nickname">
        <Text Editable EditConfig="_editableNickname">
            @(Pokemon.NicknameSet ? Pokemon.Nickname : "---")
        </Text>
    </DescriptionsItem>
    <DescriptionsItem Title="Gender">
        <GenderSelector
                Gender="@Pokemon.Gender"
                OnGenderChanged="HandleGenderChanged"/>
    </DescriptionsItem>
    <DescriptionsItem Title="Shiny">
        <Switch Value="@Pokemon.IsShiny" OnChange="HandleShinyChange"/>
    </DescriptionsItem>
    <DescriptionsItem Title="Level">
        <AntDesign.InputNumber
            TValue="int"
            Value="Pokemon.Level"
            OnChange="HandleLevelChange"
            Min="1"
            Max="100"
            DefaultValue="1"/>
    </DescriptionsItem>
    <DescriptionsItem Title="Nature">
        <NatureSelect
            SelectedNature="Pokemon.Natures.Nature"
            SelectedNatureChanged="HandleNatureChanged"/>
    </DescriptionsItem>
    @if (Pokemon.Form.HasForm)
    {
        <DescriptionsItem Title="Form">
            <FormSelect
                Pokemon="Pokemon"
                SelectedFormId="Pokemon.Form.Form?.Id"
                SelectedFormChanged="HandleFormChanged"/>
        </DescriptionsItem>
    }
    <DescriptionsItem Title="Held Item">
        <ItemSelect
            Items="Pokemon.Game.ItemRepository.GameItems"
            SelectedItemId="Pokemon.HeldItem.Id"
            SelectedItemChanged="HandleHeldItemChanged"/>
    </DescriptionsItem>
    <DescriptionsItem Title="Ability">
        <AbilitySelect
            SelectedAbilityId="Pokemon.Ability.Id"
            SelectedAbilityChanged="HandleAbilityChanged"
        />
    </DescriptionsItem>
    <DescriptionsItem>
        <TitleTemplate>
            @(Egg.IsEgg ? "Hatch Counter" : "Friendship")
        </TitleTemplate>
        <ChildContent>
            <AntDesign.InputNumber
                TValue="int"
                Value="@(Egg.IsEgg ? Egg.HatchCounter ?? 1 : Pokemon.Friendship)"
                OnChange="HandleFriendshipOrHatchCounterChange"
                Min="@(Egg.IsEgg ? Egg.MinCounter : 1)"
                Max="@(Egg.IsEgg ? Egg.MaxCounter : 255)"
                DefaultValue="1"/>
        </ChildContent>
    </DescriptionsItem>
    <DescriptionsItem Title="Egg">
        <Switch Value="Egg.IsEgg" OnChange="HandleIsEggSwitched"/>
    </DescriptionsItem>
    <DescriptionsItem Title="Infected">
        <Switch Disabled Value="Pokemon.Flags.IsInfected" OnChange="f => Pokemon.Flags.IsInfected = f"/>
    </DescriptionsItem>
    <DescriptionsItem Title="Cured">
        <Switch Disabled Value="Pokemon.Flags.IsCured" OnChange="f => Pokemon.Flags.IsCured = f"/>
    </DescriptionsItem>
</ResponsibleDescriptions>

@code {
    [Parameter] public required Pokemon Pokemon { get; set; }
    [Parameter] public EventCallback<Pokemon> OnPokemonChanged { get; set; }

    private Egg Egg => Pokemon.Egg;
    
    private TypographyEditableConfig _editableNickname = default!;

    protected override void OnInitialized()
    {
        _editableNickname = new() { Text = Pokemon.Nickname, OnChange = (v) => HandleNickNameChanged(v) };
    }
    
    private Task HandleLevelChange(int newLevel)
    {
        Pokemon.ChangeLevel(newLevel);
        return OnPokemonChanged.InvokeAsync(Pokemon);
    }

    private Task HandleFriendshipOrHatchCounterChange(int newValue)
    {
        if (Egg.IsEgg)
        {
            Egg.HatchCounter = newValue;
        }
        else
        {
            Pokemon.Friendship = newValue;
        }

        return OnPokemonChanged.InvokeAsync(Pokemon);
    }

    private Task HandleHatchCounterChange(string newValueString)
    {
        var pokemon = Pokemon;

        var parsed = int.TryParse(newValueString, out var newValue);
        if (!parsed) return Task.CompletedTask;

        pokemon.Egg.HatchCounter = newValue;
        return OnPokemonChanged.InvokeAsync(Pokemon);
    }

    private Task HandleShinyChange(bool newShinyValue)
    {
        Pokemon.SetShiny(newShinyValue);
        return OnPokemonChanged.InvokeAsync(Pokemon);
    }

    private Task HandleIsEggSwitched(bool isEgg)
    {
        Egg.IsEgg = isEgg;
        return OnPokemonChanged.InvokeAsync(Pokemon);
    }

    private Task HandleNickNameChanged(string? nickname)
    {
        Pokemon.ChangeNickname(nickname?.Trim() ?? string.Empty);
        _editableNickname.Text = Pokemon.Nickname;
        return OnPokemonChanged.InvokeAsync(Pokemon);
    }

    private Task HandleFormChanged(FormDefinition form)
    {
        Pokemon.Form.Form = form;
        return OnPokemonChanged.InvokeAsync(Pokemon);
    }

    private Task HandleNatureChanged(Nature nature)
    {
        Pokemon.Natures.ChangeAll(nature);
        return OnPokemonChanged.InvokeAsync(Pokemon);
    }

    private Task HandleHeldItemChanged(ItemDefinition item)
    {
        Pokemon.HeldItem = item;
        return OnPokemonChanged.InvokeAsync(Pokemon);
    }

    private Task HandleSelectedSpeciesChanged(SpeciesDefinition definition)
    {
        Pokemon.Species = definition;
        _editableNickname.Text = Pokemon.Nickname;
        return OnPokemonChanged.InvokeAsync(Pokemon);
    }

    private Task HandleGenderChanged(Gender gender)
    {
        Pokemon.Gender = gender;
        return OnPokemonChanged.InvokeAsync(Pokemon);
    }

    private Task HandleAbilityChanged(AbilityDefinition ability)
    {
        Pokemon.Ability = ability;
        return OnPokemonChanged.InvokeAsync(Pokemon);
    }

}