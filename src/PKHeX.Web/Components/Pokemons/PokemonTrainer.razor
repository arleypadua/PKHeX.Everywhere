<Flex Style="gap: 20px; width: 100%" Direction="FlexDirection.Vertical" Wrap="FlexWrap.Wrap">
    <ResponsibleDescriptions
        Bordered
        Size="DescriptionsSize.Small"
        Style="width: 100%">
        <DescriptionsItem
            Title="Handler">
            <RadioGroup
                TValue="Owner.Handler"
                Value="Pokemon.Owner.CurrentHandler" 
                ValueChanged="@(v => OnCurrentHandlerChanged(v))" 
                ButtonStyle="@RadioButtonStyle.Solid">
                <Radio RadioButton Value="@(Owner.Handler.OriginalTrainer)">OT</Radio>
                <Radio RadioButton Value="@(Owner.Handler.SomeoneElse)">Other</Radio>
            </RadioGroup>
        </DescriptionsItem>
    </ResponsibleDescriptions>

    <ResponsibleDescriptions
        Bordered
        Title="@OTTitle"
        Size="DescriptionsSize.Small"
        Style="width: 100%">
        <DescriptionsItem Title="TID">
            <AntDesign.InputNumber
                TValue="uint"
                Value="Pokemon.Owner.TID"
                OnChange="HandleTIDChanged"
                PlaceHolder="TID"
                Min="0"
                Max="uint.MaxValue"/>
        </DescriptionsItem>

        <DescriptionsItem Title="SID">
            <AntDesign.InputNumber
                TValue="uint"
                Value="Pokemon.Owner.SID"
                OnChange="HandleSIDChanged"
                PlaceHolder="SID"
                Min="0"
                Max="uint.MaxValue"/>
        </DescriptionsItem>

        <DescriptionsItem Title="Name">
            <Input
                TValue="string"
                Value="Pokemon.Owner.Name"
                OnChange="HandleNameChanged"
                PlaceHolder="Name"
                Style="max-width: 200px;"/>
        </DescriptionsItem>

        <DescriptionsItem Title="Gender">
            <GenderSelector
                Gender="Pokemon.Owner.Gender"
                OnGenderChanged="HandleGenderChanged"/>
        </DescriptionsItem>
    </ResponsibleDescriptions>

    <ResponsibleDescriptions
        Bordered
        Title="@HandlerTitle"
        Size="DescriptionsSize.Small"
        Style="width: 100%">
        <DescriptionsItem Title="Name">
            <Input
                TValue="string"
                Value="Pokemon.Owner.HandlingTrainerName"
                OnChange="HandleHandlingTrainerNameChanged"
                PlaceHolder="Name"/>
        </DescriptionsItem>

        <DescriptionsItem Title="Gender">
            <GenderSelector
                Gender="Pokemon.Owner.HandlingTrainerGender"
                OnGenderChanged="HandleHandlingTrainerGenderChanged"/>
        </DescriptionsItem>
    </ResponsibleDescriptions>
</Flex>

@code {
    [Parameter] public required Pokemon Pokemon { get; set; }
    [Parameter] public EventCallback<Pokemon> OnPokemonChanged { get; set; }

    private string OTTitle => Pokemon.Owner.CurrentHandler == Owner.Handler.OriginalTrainer
        ? "Original Trainer ✅"
        : "Original Trainer";

    private string HandlerTitle => Pokemon.Owner.CurrentHandler == Owner.Handler.SomeoneElse
        ? "Current Handler ✅"
        : "Current Handler";

    private Task HandleTIDChanged(uint value)
    {
        Pokemon.Owner.TID = value;
        return OnPokemonChanged.InvokeAsync(Pokemon);
    }

    private Task HandleSIDChanged(uint value)
    {
        Pokemon.Owner.SID = value;
        return OnPokemonChanged.InvokeAsync(Pokemon);
    }

    private Task HandleNameChanged(string value)
    {
        Pokemon.Owner.Name = value;
        return OnPokemonChanged.InvokeAsync(Pokemon);
    }

    private Task HandleGenderChanged(Gender value)
    {
        Pokemon.Owner.Gender = value;
        return OnPokemonChanged.InvokeAsync(Pokemon);
    }

    private Task HandleHandlingTrainerNameChanged(string value)
    {
        Pokemon.Owner.HandlingTrainerName = value;
        return OnPokemonChanged.InvokeAsync(Pokemon);
    }

    private Task HandleHandlingTrainerGenderChanged(Gender value)
    {
        Pokemon.Owner.HandlingTrainerGender = value;
        return OnPokemonChanged.InvokeAsync(Pokemon);
    }

    private Task OnCurrentHandlerChanged(Owner.Handler value)
    {
        Pokemon.Owner.CurrentHandler = value;
        return OnPokemonChanged.InvokeAsync(Pokemon);
    }

}