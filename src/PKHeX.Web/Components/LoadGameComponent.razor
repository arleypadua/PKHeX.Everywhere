@using PKHeX.Core
@using PKHeX.Facade.Repositories
@inject JsService Js
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject AntdThemeService ThemeService
@inject INotificationService Notification
@inject UserJourneyService UserJourneyService

@if (GameService.IsLoaded)
{
    <Flex Direction="FlexDirection.Vertical" Align="FlexAlign.Center" Style="width: 100%; gap: 20px;">
        <Descriptions Title="Loaded Game" Bordered Column="@ThemeService.ColumnsConfiguration" Size="DescriptionsSize.Small" Style="width: 100%">
            <DescriptionsItem Title="File">@GameService.FileName</DescriptionsItem>
            <DescriptionsItem Title="Version">@GameService.LoadedGame.SaveVersion.Name</DescriptionsItem>
        </Descriptions>

        <Flex Direction="FlexDirection.Vertical" Style="width: 100%; max-width: 300px; gap: 20px;">
            <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Export" OnClick='ExportSaveAsync'>Export</Button>
            <Button Icon="@IconType.Outline.FolderOpen" OnClick='OpenFilePickerAsync'>Open new...</Button>
        </Flex>
    </Flex>
}
else
{
    <Flex Direction="FlexDirection.Vertical" Align="FlexAlign.Center" Style="width: 100%; max-width: 300px; gap: 20px;">
        <Button
            OnClick="GoToHome"
            Style="min-width: 150px">Home</Button>
        
        <Button
            Type="@ButtonType.Primary"
            Icon="@IconType.Outline.FolderOpen"
            OnClick="OpenFilePickerAsync"
            Style="min-width: 150px">Open</Button>

        <ButtonOrMenu
            Actions="EmptyActions"
            Style="min-width: 150px"/>

        <Button
            OnClick='OpenDemo'
            Style="min-width: 150px">
            Demo
        </Button>
    </Flex>
}

<InputFile OnChange="LoadSave" @ref="_inputGameFile" style="display: none;"></InputFile>


@code {
    [Inject] public required GameService GameService { get; set; }
    [Inject] public required AnalyticsService Analytics { get; set; }

    private InputFile _inputGameFile = default!;

    private List<ButtonOrMenu.ButtonAction> EmptyActions => new[]
        {
            new ButtonOrMenu.ButtonAction
            {
                Type = ButtonType.Default,
                Label = "Empty",
                OnClickAsync = () => LoadEmpty(GameVersionRepository.Instance.Get(GameVersion.SW))
            }
        }
        .Concat(GameVersionRepository.Instance
            .All
            .OrderBy(v => v.Name)
            .Where(a => !a.Aggregated)
            .Select(v => new ButtonOrMenu.ButtonAction
            {
                Type = ButtonType.Link,
                Label = v.Name,
                OnClickAsync = () => LoadEmpty(v)
            }))
        .ToList();

    private Task LoadEmpty(GameVersionDefinition version)
    {
        GameService.LoadBlank(version);
        Navigation.NavigateTo("/");

        return Task.CompletedTask;
    }

    private async Task LoadSave(InputFileChangeEventArgs e)
    {
        using MemoryStream ms = new MemoryStream();

        try
        {
            await e.File.OpenReadStream(MaxFileSize).CopyToAsync(ms);
            GameService.Load(ms.ToArray(), e.File.Name);
        }
        catch (IOException ioException)
            when (ioException.Message.Contains("exceeds the maximum"))
        {
            _ = Notification.Open(new()
            {
                Message = "File is too large",
                Description = "The file should not exceed 2Mb.",
                NotificationType = NotificationType.Error,
            });
        }
        catch (GameNotLoadedException notLoaded)
        {
            _ = Notification.Open(new()
            {
                Message = notLoaded.Message,
                Description = "The file is not a valid save file.",
                NotificationType = NotificationType.Error,
            });
        }

        Navigation.NavigateTo("/");
    }

    private async Task ExportSaveAsync()
    {
        if (!GameService.IsLoaded) return;

        var stream = GameService.Export();
        await Js.DownloadFile(stream, GameService.FileName ?? string.Empty);
        
        Analytics.TrackGameExported(GameService.LoadedGame);
    }

    private async Task OpenDemo()
    {
        var testData = await HttpClient.GetByteArrayAsync("https://raw.githubusercontent.com/projectpokemon/ProjectCompleteDexSaves/master/Gen%204%20-%20Pokemon%20SoulSilver%20(ENG).sav");
        GameService.Load(testData, "savedata_1.sav");
        Navigation.NavigateTo($"/");
    }
    
    private Task GoToHome(MouseEventArgs arg)
    {
        UserJourneyService.IgnoreFirstLoadAndGoToHome();
        return Task.CompletedTask;
    }

    private async Task OpenFilePickerAsync() => await Js.ClickOnAsync(_inputGameFile.Element);

    private const int MaxFileSize = 6 * 1024 * 1000;

}
