@using PKHeX.Core

<Select TItem="NatureSelection"
        TItemValue="Nature?"
        DataSource="@_natures"
        @bind-Value="@SelectedNature"
        OnSelectedItemChanged="SelectedNatureChangedInternal"
        LabelName="@nameof(NatureSelection.Name)"
        ValueName="@nameof(NatureSelection.Nature)"
        Placeholder="Nature"
        DefaultActiveFirstOption="false"
        EnableSearch
        Disabled="@Disabled"
        EnableVirtualization>
    <LabelTemplate>
        @RenderItem(context)
    </LabelTemplate>
    <ItemTemplate>
        @RenderItem(context)
    </ItemTemplate>
</Select>

@code {
    private NatureSelection[] _natures = Enum.GetValues<Nature>()
        .Select(n => new NatureSelection(n, n.ToString()))
        .ToArray();

    private bool _dataSourceJustLoaded = true;
    
    [Parameter] public Nature? SelectedNature { get; set; }
    [Parameter] public EventCallback<Nature> SelectedNatureChanged { get; set; }
    [Parameter] public bool IgnoreRenderingEvents { get; set; }
    [Parameter] public bool Disabled { get; set; }

    RenderFragment RenderItem(NatureSelection item)
    {
        return @<span>@item.Name</span>;
    }
    
    private Task SelectedNatureChangedInternal(NatureSelection arg)
    {
        if (_dataSourceJustLoaded)
        {
            _dataSourceJustLoaded = false;
            return Task.CompletedTask;
        }

        return SelectedNatureChanged.InvokeAsync(arg.Nature);
    }
    
    protected override void OnInitialized()
    {
        _dataSourceJustLoaded = IgnoreRenderingEvents;
    }

    record NatureSelection(Nature Nature, string Name);

}