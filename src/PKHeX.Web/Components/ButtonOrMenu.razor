@if (Actions.Count == 1)
{
    var single = Actions.Single();
    @if(single.Disabled && !string.IsNullOrWhiteSpace(single.DisabledMessage))
    {
        <Tooltip Title="@single.DisabledMessage">
            @RenderButton(single)
        </Tooltip>
    }
    else
    {
        @RenderButton(single)
    }
}
else if (Actions.Count > 1)
{
    var first = Actions.First();
    var others = Actions.Skip(1);
    
    <DropdownButton
        Type="first.Type"
        OnClick="first.OnClickAsync"
        Icon="@(first.Icon ?? "ellipsis")"
        Class="button_or_menu"
        Style="@Style">
        <ChildContent>
            @first.Label
        </ChildContent>
        
        <Overlay>
            <Menu
                Class="button_or_menu__dropdown_items">
                @foreach (var action in others)
                {
                    <MenuItem>
                        @if(action.Disabled && !string.IsNullOrWhiteSpace(action.DisabledMessage))
                        {
                            <Tooltip Title="@action.DisabledMessage">
                                @RenderButton(action)
                            </Tooltip>
                        }
                        else
                        {
                            @RenderButton(action)
                        }
                    </MenuItem>
                }
            </Menu>
        </Overlay>
    </DropdownButton>
}

@code {
    [Parameter] public required IList<ButtonAction> Actions { get; set; }
    [Parameter] public string? Style { get; set; }

    RenderFragment RenderButton(ButtonAction action, string? style = null) => 
        @<Button
             Type="@action.Type"
             Icon="@action.Icon"
             Disabled="@action.Disabled"
             OnClick="@action.OnClickAsync"
             Style="@style">
            @action.Label
        </Button>;

    public class ButtonAction
    {
        public required string Type { get; init; } = ButtonType.Primary;
        public required string Label { get; init; }
        public Func<Task> OnClickAsync { get; init; } = () => Task.CompletedTask;
        public bool Disabled { get; init; }
        public string? DisabledMessage { get; set; }
        
        public string? Icon { get; init; }
    }

}

<style>
    .button_or_menu .ant-btn-group {
        width: 100%;
    }
    .button_or_menu .ant-btn-group button {
        flex-grow: 1;
    }
    
    .button_or_menu__dropdown_items {
        max-height: 250px;
        overflow: scroll;

        -ms-overflow-style: none;
        scrollbar-width: none;
    }
</style>