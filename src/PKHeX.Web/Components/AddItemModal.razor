<Modal Title="@($"Add Item to \"{TargetInventory.Type}\"")"
       @bind-Visible="@Visible"
       OnOk="@HandleOkInternal"
       OnCancel="@HandleCancelInternal">
    @AddItemModalTemplate()
</Modal>

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    
    [Parameter] public EventCallback<ItemToBeAdded> OnOk { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public required Inventory TargetInventory { get; set; }

    private ushort? _itemIdToBeAdded;
    private uint? _itemCountToBeAdded;
    
    RenderFragment AddItemModalTemplate()
    {
        return
            @<Space Direction="SpaceDirection.Vertical" Align="SpaceAlign.Center" Style="width: 100%; gap: 20px;">
                <ItemSelect 
                    Items="@TargetInventory.CurrentSupportedItems"
                    SelectedItemId="_itemIdToBeAdded"
                    SelectedItemChanged="i => _itemIdToBeAdded = i.Id"/>
                
                <AntDesign.InputNumber
                    TValue="uint?"
                    Style="width: 100%; max-width: 110px;"
                    @bind-Value="@_itemCountToBeAdded"
                    PlaceHolder="Quantity"
                    Min="0"
                    Max="999"/>
            </Space>
            ;
    }

    private async Task HandleOkInternal()
    {
        if (_itemIdToBeAdded is null || _itemCountToBeAdded is null) return;

        await OnOk.InvokeAsync(new ItemToBeAdded(_itemIdToBeAdded.Value, _itemCountToBeAdded.Value));
        
        ResetModal();
    }

    private Task HandleCancelInternal()
    {
        ResetModal();
        return OnCancel.InvokeAsync();
    }

    private void ResetModal()
    {
        _itemCountToBeAdded = null;
    }

    public record ItemToBeAdded(ushort Id, uint Count);
}