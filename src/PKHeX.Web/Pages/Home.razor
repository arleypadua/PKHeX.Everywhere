@page "/"
@using PKHeX.Web.Plugins
@using PKHeX.Web.Services.Plugins
@inject GameService GameService
@inject AntdThemeService ThemeService
@inject PlugInRegistry PlugInRegistry
@inject PlugInRuntime PlugInRuntime

<PageTitle>Home</PageTitle>

@if (_game is not null)
{
    <Descriptions Title="Trainer" Bordered Column="@ThemeService.ColumnsConfiguration" Size="small">
        <DescriptionsItem Title="TID/SID">@_game.Trainer.Id</DescriptionsItem>
        <DescriptionsItem Title="Name">@_game.Trainer.Name</DescriptionsItem>
        <DescriptionsItem Title="Gender">@_game.Trainer.Gender.Symbol</DescriptionsItem>
        <DescriptionsItem Title="Cash">
            <AntDesign.InputNumber
                TValue="uint"
                Formatter='value => $"$ {value}"'
                Value="@_game.Trainer.Money.Amount"
                OnChange="newValue => _game.Trainer.Money.Set(newValue)"
                Style="width: 100%; max-width: 170px;"
                Min="0" Max="999999"/>
        </DescriptionsItem>
        <DescriptionsItem Title="Rival">@_game.Trainer.RivalName</DescriptionsItem>
    </Descriptions>
}

@{ var actions = PlugInRegistry.GetAllEnabledHooks<IQuickAction>().ToList(); }
@if (actions.Any())
{
    <Space
        Style="width: 100%; gap: 20px; align-items: center; margin-top: 20px"
        Direction="DirectionVHType.Vertical">
        <h1>Quick Actions</h1>
        <Space
            Style="gap: 20px; align-items: center; justify-items: center;"
            Direction="DirectionVHType.Horizontal"
            Wrap>
            @foreach (var action in actions)
            {
                @RenderActionButton(action)
            }
        </Space>
    </Space>
}

@code {
    private Game? _game;

    protected override void OnInitialized()
    {
        _game = GameService.Game;
    }

    private RenderFragment RenderActionButton(IQuickAction action)
    {
        return
            @<Button
                 Type="@ButtonType.Link"
                 OnClick="() => HandleActionButtonClick(action)"
                 Disabled="@action.DisabledInfo.Disabled">
                @action.Label
            </Button>;
    }

    private async Task HandleActionButtonClick(IQuickAction action)
    {
        await PlugInRuntime.RunOn(action, _ => action.OnActionRequested());
    }

}