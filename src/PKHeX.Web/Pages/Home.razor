@page "/"
@using PKHeX.Web.Plugins
@using PKHeX.Web.Services.Plugins
@inject GameService GameService
@inject AntdThemeService ThemeService
@inject PlugInRegistry PlugInRegistry
@inject PlugInRuntime PlugInRuntime

<PageTitle>Home</PageTitle>

@if (_game is not null)
{
    <Descriptions Title="Trainer" Bordered Column="@ThemeService.ColumnsConfiguration" Size="small">
        <DescriptionsItem Title="TID/SID">@_game.Trainer.Id</DescriptionsItem>
        <DescriptionsItem Title="Name">@_game.Trainer.Name</DescriptionsItem>
        <DescriptionsItem Title="Gender">
           <GenderSelector
                Gender="@_game.Trainer.Gender"
                OnGenderChanged="HandleGenderChanged"/>
        </DescriptionsItem>
        <DescriptionsItem Title="Cash">
            <AntDesign.InputNumber
                TValue="uint"
                Formatter='value => $"$ {value}"'
                Value="@_game.Trainer.Money.Amount"
                OnChange="newValue => _game.Trainer.Money.Set(newValue)"
                Style="width: 100%; max-width: 170px;"
                Min="0" Max="999999"/>
        </DescriptionsItem>
        <DescriptionsItem Title="Rival">@_game.Trainer.RivalName</DescriptionsItem>
    </Descriptions>
}

<Space
    Style="width: 100%; gap: 20px; align-items: center; margin-top: 20px"
    Direction="DirectionVHType.Vertical">
    @{ FetchPlugInQuickActions(); }
    @if (_actions.Any())
    {
        <h1>Quick Actions</h1>
        <Space
            Style="gap: 20px; align-items: center; justify-items: center;"
            Direction="DirectionVHType.Horizontal"
            Wrap>
            @foreach (var action in _actions)
            {
                @RenderActionButton(action)
            }
        </Space>
    }

    <GenericPlugInFailureAlert
        @bind-Error="_quickActionsFailure"/>
</Space>

@code {
    private Game? _game;
    private List<IQuickAction> _actions = [];
    private Exception? _quickActionsFailure;

    protected override void OnInitialized()
    {
        _game = GameService.Game;
    }

    private RenderFragment RenderActionButton(IQuickAction action)
    {
        @* var button = @<Button *@
        @*                   Type="@ButtonType.Link" *@
        @*                   OnClick="@(() => HandleActionButtonClick(action))" *@
        @*                   Disabled="@action.DisabledInfo.Disabled"> *@
        @*                  @action.Label *@
        @*              </Button>; *@
        @* *@
        @* return action.DisabledInfo.Disabled && !string.IsNullOrWhiteSpace(action.DisabledInfo.Reason) *@
        @*     ? @<Tooltip Title="@action.DisabledInfo.Reason">@button</Tooltip> *@
        @*     : button; *@
        if (action.DisabledInfo.Disabled && !string.IsNullOrWhiteSpace(action.DisabledInfo.Reason))
        {
            return @<Tooltip Title="@action.DisabledInfo.Reason">
                       <Button
                           Type="@ButtonType.Link"
                           OnClick="@(() => HandleActionButtonClick(action))"
                           Disabled="@action.DisabledInfo.Disabled">
                           @action.Label
                       </Button>
                   </Tooltip>;
        }

        return @<Button
                    Type="@ButtonType.Link"
                    OnClick="@(() => HandleActionButtonClick(action))"
                    Disabled="@action.DisabledInfo.Disabled">
                   @action.Label
               </Button>;
    }

    private async Task HandleActionButtonClick(IQuickAction action)
    {
        await PlugInRuntime.RunOn(action, _ => action.OnActionRequested());
    }

    private void FetchPlugInQuickActions()
    {
        try
        {
            _actions = PlugInRegistry.GetAllEnabledHooks<IQuickAction>().ToList();
        }
        catch (Exception e)
        {
            _quickActionsFailure = e;
        }
    }
    
    private Task HandleGenderChanged(Gender gender)
    {
        if (_game is null) return Task.CompletedTask;
        _game.Trainer.Gender = gender;

        return Task.CompletedTask;
    }
}