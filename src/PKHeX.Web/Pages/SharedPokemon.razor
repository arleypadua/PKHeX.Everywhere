@page "/s/{Id}"
@using PKHeX.Web.BackendApi.Repositories
@using PKHeX.Web.BackendApi.Representation
@using PKHeX.Web.Services.Auth
@inject PublicPokemonRepository PublicPokemonRepository
@inject NavigationManager Navigation
@inject JsService Js
@inject AnalyticsService AnalyticsService
@inject AuthService Auth
@inject ILogger<SharedPokemon> Logger

@if (_metadata is not null)
{
    <Flex Style="width: 100%; gap: 20px;" Class="shared_pokemon_page__heading_extra__grow" Direction="FlexDirection.Vertical">
        <PageHeader BackIcon="true" Style="max-width: 100%">
            <TitleTemplate>Pokemon</TitleTemplate>

            <PageHeaderExtra>
                <Space Style="width: 100%;" Align="SpaceAlign.Center" Direction="SpaceDirection.Vertical">
                    <PokemonImage
                        Species="@_metadata.Species"
                        IsShiny="@_metadata.IsShiny"/>
                </Space>
            </PageHeaderExtra>
        </PageHeader>

        <PokemonPublicDescription Pokemon="_metadata"/>

        <PokemonPublicMoves Pokemon="_metadata" />
        
        <PokemonPublicMetConditions Pokemon="_metadata"/>
        
        <PokemonPublicStats Pokemon="_metadata" />
        
        <Space Align="SpaceAlign.End" Style="width: 100%; align-items: center; justify-content: end; gap:  10px;" Direction="SpaceDirection.Horizontal">
            <ButtonOrMenu Actions="ExtraActions"/>
        </Space>
    </Flex>
}

@code {
    [Parameter] public required string Id { get; set; }
    private Guid _id;

    private PokemonPublicMetadataRepresentation? _metadata;

    protected override async Task OnInitializedAsync()
    {
        var parsed = Guid.TryParse(Id, out _id);
        if (!parsed)
        {
            Navigation.NavigateToHomePage();
            return;
        }

        try
        {
            _metadata = await PublicPokemonRepository.GetById(_id);
            AnalyticsService.TrackSharedPokemonSeen(_metadata, await Auth.GetSignedInUser());
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Failed to load Pokemon");
            Navigation.NavigateToHomePage();
        }
    }

    private IList<ButtonOrMenu.ButtonAction> ExtraActions => new List<ButtonOrMenu.ButtonAction>
    {
        new()
        {
            Type = ButtonType.Primary,
            Label = "Download",
            Disabled = !(_metadata?.AllowDownload ?? false),
            DisabledMessage = "The owner of this Pok√©mon has disabled downloads.",
            OnClickAsync = HandleDownloadClick,
        },
    };

    private async Task HandleDownloadClick()
    {
        if (_metadata is null) return;
        
        AnalyticsService.TrackSharedPokemonDownloaded(_metadata, await Auth.GetSignedInUser());
        
        var file = await PublicPokemonRepository.GetBinaries(_metadata.Id);
        var memoryStream = new MemoryStream(file);
        var fileName = $"{_metadata.Species}-{_metadata.Id}.bin";
        await Js.DownloadFile(memoryStream, fileName);
    }

}

<style>
    .shared_pokemon_page__heading_extra__grow .ant-page-header-heading-extra {
        flex-grow: 1;
    }
</style>