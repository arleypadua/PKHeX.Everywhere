@page "/party"
@inject GameService GameService
@inject ClipboardService Clipboard
@inject INotificationService Notification
@inject JsService Js

<PageTitle>Party</PageTitle>

@if (GameService.IsLoaded)
{
    <Flex Direction="FlexDirection.Vertical" Style="width: 100%; gap: 20px;">
        <PageHeader BackIcon="true" Style="max-width: 100%">
            <TitleTemplate>Party</TitleTemplate>

            <PageHeaderExtra>
                @* <Button Type="@ButtonType.Primary" Icon="@IconType.Outline.Copy" OnClick="HandleExportShowdownClick">Showdown</Button> *@
                <ButtonOrMenu Actions="ExtraActions" />
            </PageHeaderExtra>
        </PageHeader>

        <PokemonTable DataSource="@(GameService.LoadedGame.Trainer.Party.Pokemons)" Source="PokemonSource.Party"/>
    </Flex>
}

@code {

    private IList<ButtonOrMenu.ButtonAction> ExtraActions => new List<ButtonOrMenu.ButtonAction>
    {
        new ()
        {
            Type = ButtonType.Primary,
            Label = "Calculator",
            OnClickAsync = HandleCalculatorClick,
        },
        new ()
        {
            Type = ButtonType.Link,
            Icon = IconType.Outline.Copy,
            Label = "Showdown",
            OnClickAsync = HandleExportShowdownClick,
        },
    };
    
    private Task HandleCalculatorClick()
    {
        return Js.OpenSmogonDamageCalc(GameService.LoadedGame.Trainer.Party.Pokemons);
    }

    private Task HandleExportShowdownClick()
    {
        var party = GameService.LoadedGame.Trainer.Party.Pokemons;
        Clipboard.WriteTextAsync(GameService.LoadedGame.Trainer.Party.Pokemons.Showdown());
        _ = Notification.Open(new ()
        {
            Message = "Showdown copied to clipboard",
            Description = $"{party.Count} entries",
            NotificationType = NotificationType.Success,
        });

        return Task.CompletedTask;
    }

}